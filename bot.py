from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, filters
from aiogram.utils import executor
from loguru import logger
import config
from google_table import GoogleTable
from utils import get_command_number

logger.add(
    config.settings["LOG_FILE"],
    format="{time} {level} {message}",
    level="DEBUG",
    rotation="1 week",
    compression="zip",
)


class FreakTelegramBot(Bot):
    """–ö–ª–∞—Å—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è —Å—Ç—É–¥–∏–∏ —Ç–∞–Ω—Ü–µ–≤."""
    def __init__(
        self,
        token:str,
        parse_mode:'aiogram.enums.ParseMode',
        google_table:GoogleTable=None,
    ) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å.
        Args:
            tokens (str): –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Telegram API.
            parse_mode (ParseMode): id –ø—É–±–ª–∏—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –æ—Ç –∏–º–µ–Ω–∏ –∫–æ—Ç–æ—Ä–æ–π –æ–ø—Ä–æ—Å.
            google_table (GoogleTable): –ê–≥—Ä–µ–≥–∞—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheet.
        Returns:- 
        """
        super().__init__(token, parse_mode=parse_mode)
        self._google_table: GoogleTable = google_table

bot: FreakTelegramBot = FreakTelegramBot(
    token=config.settings["TOKEN"],
    parse_mode=types.ParseMode.HTML,
    google_table=GoogleTable("creds.json", config.settings['DOC_URL'])
)
dp = Dispatcher(bot)


@dp.message_handler(filters.Regexp(regexp=r"(((–ê|–∞)–±–æ–Ω–µ–º–µ–Ω—Ç)(\s)(\d+))"))
async def abonement_handler(message_from: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ê–±–æ–Ω–µ–º–µ–Ω—Ç."""
    user_id: str = str(message_from.from_id)
    command, number = get_command_number(message_from.md_text)
    
    values = bot._google_table.search_abonement(number)
    if values == -1:
        message = '–¢–∞–∫–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ –µ–≥–æ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–∫–æ–Ω—á–∏–ª—Å—è üò∞'
    else:
        end_date_value = values[0]
        balance_value = int(values[1])
        last_digit = balance_value % 10

        if last_digit == 1 and balance_value != 11:
            balance_value = f'{balance_value} –∑–∞–Ω—è—Ç–∏–µ'
        elif last_digit in (2, 3, 4) and balance_value not in (12, 13, 14):
            balance_value = f'{balance_value} –∑–∞–Ω—è—Ç–∏—è'
        else:
            balance_value = f'{balance_value} –∑–∞–Ω—è—Ç–∏–π'
        message = f'üóì –í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è {end_date_value}\nüíÉ –£ –í–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {balance_value}'
    try:
        await message_from.reply(message)
    except Exception as send_error:
        logger.debug(f"{send_error.message}: Trouble id: {user_id}")
        return

@dp.message_handler(filters.Regexp(regexp=r"(((–ë|–±)–æ—Ç))"))
async def bot_commands_handler(message_from: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ë–æ—Ç."""
    user_id: str = str(message_from.from_id)

    message = (
        f"ü§ñ –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ß–ê–¢-–ë–û–¢–ê: ü§ñ\n\n"
        f"‚ùó –ë–æ—Ç ‚ùó\n"
        f"-- –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —á–∞—Ç-–±–æ—Ç–∞ üì£\n\n"
        f"‚ùó –ê–±–æ–Ω–µ–º–µ–Ω—Ç *** ‚ùó\n"
        f"-- (*** - ‚Ññ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞) –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—à–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ (–¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–Ω—è—Ç–∏–π) üîñ\n\n"
        f"‚ùó –ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è ‚ùó\n"
        f"-- –Ω–∞—à –∞–¥—Ä–µ—Å, –∫–∞—Ä—Ç–∞ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –∫–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏ üó∫\n\n"
        f"‚ùó –¶–µ–Ω—ã ‚ùó\n"
        f"-- —Ü–µ–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏—è –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ üí∞\n\n"
        f"‚ùó –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚ùó\n"
        f"-- —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π üìÜ\n\n"
        f"–ï—Å–ª–∏ —É –í–∞—Å –∏–Ω–æ–π –≤–æ–ø—Ä–æ—Å, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üë§ @melnikovvv"
    )
    try:
        await message_from.reply(message)
    except Exception as send_error:
        logger.debug(f"{send_error.message}: Trouble id: {user_id}")
        return

@dp.message_handler(filters.Regexp(regexp=r"(((–¶|—Ü)–µ–Ω—ã))"))
async def prices_handler(message_from: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¶–µ–Ω—ã."""
    user_id: str = str(message_from.from_id)

    message = 'https://vk.com/wall-208780733_645'
    try:
        await message_from.reply(message)
    except Exception as send_error:
        logger.debug(f"{send_error.message}: Trouble id: {user_id}")
        return

@dp.message_handler(filters.Regexp(regexp=r"(((–†|—Ä)–∞—Å–ø–∏—Å–∞–Ω–∏–µ))"))
async def schedule_kids_handler(message_from: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ."""
    user_id: str = str(message_from.from_id)
    
    message = "https://vk.com/wall-208780733_643"
    try:
        await message_from.reply(message)
    except Exception as send_error:
        logger.debug(f"{send_error.message}: Trouble id: {user_id}")
        return

@dp.message_handler(filters.Regexp(regexp=r"(((–ö|–∫)–∞–∫)(\s)(–¥–æ–±—Ä–∞—Ç—å—Å—è))"))
async def how_to_get_handler(message_from: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è."""
    user_id: str = str(message_from.from_id)
    
    message = "https://vk.com/wall-208780733_279"
    try:
        await message_from.reply(message)
    except Exception as send_error:
        logger.debug(f"{send_error.message}: Trouble id: {user_id}")
        return


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
